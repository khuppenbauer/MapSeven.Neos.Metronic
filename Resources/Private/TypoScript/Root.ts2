include: NodeTypes/Footer.ts2
include: NodeTypes/Structure.ts2
include: NodeTypes/Menu.ts2
include: NodeTypes/ContactForm.ts2

namespace: TypoScript=TYPO3.TypoScript

/**
 * Root TypoScript template for the Snippets Site
 */
page = Page {
	head {
		meta = TypoScript:Template {
			templatePath = 'resource://MapSeven.Neos.Metronic/Private/Templates/Page/Default.html'
			sectionName = 'meta'
		}

		stylesheets.site = TypoScript:Template {
			templatePath = 'resource://MapSeven.Neos.Metronic/Private/Templates/Page/Default.html'
			sectionName = 'stylesheets'
		}

		javascripts.site = TypoScript:Template {
			templatePath = 'resource://MapSeven.Neos.Metronic/Private/Templates/Page/Default.html'
			sectionName = 'scripts'
		}

		titleTag {
			// Overwrite the title tags content with a collection to create a breadcrumb
			content = TYPO3.TypoScript:Collection {
				// Retrieve all parent document nodes excluding the homepage
				collection = ${q(documentNode).add(q(documentNode).parents()).slice(0, -1).get()}
				itemName = 'node'
				iterationName = 'nodeIterator'
				// Implode node titles with a dash
				itemRenderer = ${q(node).property('title') + (nodeIterator.isLast ? '' : ' - ')}
				// Always add general site name as suffix
				@process.siteName = ${(TitleTag.resolveFromRoute('--flowpack_snippets-search.post', 'Flowpack\Snippets\Domain\Model\Post', 'title') ? TitleTag.resolveFromRoute('--flowpack_snippets-search.post', 'Flowpack\Snippets\Domain\Model\Post', 'title') : value)}
			}
		}
	}

	bodyTag {
		attributes.class = 'page-header-fixed page-full-width'
	}

	body {
		templatePath = 'resource://MapSeven.Neos.Metronic/Private/Templates/Page/Page.html'
		sectionName = 'body'
		parts {
			mainMenu = Menu {
				entryLevel = 1
				templatePath = 'resource://MapSeven.Neos.Metronic/Private/Templates/TypoScriptObjects/Menu/MainMenu.html'
				maximumLevels = 3
				site = ${site}
			}
			userMenu = Menu {
				maximumLevels = 1
				startingPoint = ${q(site).children('user').get(0)}
				templatePath = 'resource://MapSeven.Neos.Metronic/Private/Templates/TypoScriptObjects/Menu/UserMenu.html'
				userObject = ${Configuration.setting('Flowpack.Neos.FrontendUserManager.userObject')}
				providerName = ${Configuration.setting('Flowpack.Neos.FrontendUserManager.providerName')}
				user = ${Authentication.identifier(Configuration.setting('Flowpack.Neos.FrontendUserManager.userObject'))}
				isAuthenticated = ${Authentication.isAuthenticated(this.providerName)}
				login = Flowpack.Neos.FrontendUserManager:Login
				logout = Flowpack.Neos.FrontendUserManager:Logout
				notification = Flowpack.Snippets:Notification
				@cache {
					entryIdentifier {
						documentNode = ${documentNode}
						domain = ${site.context.currentDomain}
						authenticationIdentifier = ${Authentication.identifier(Configuration.setting('Flowpack.Neos.FrontendUserManager.userObject'), 'identifier')}
						authenticated = ${Authentication.isAuthenticated(this.providerName)}
					}
				}
			}
			login = Flowpack.Neos.FrontendUserManager:Login
		}

		content {
			main = PrimaryContent {
				nodePath = 'main'
			}

			footer = TYPO3.Neos:ContentCollection {
				nodePath = ${q(site).find('footer').property('_path')}
				collection = ${q(site).children('footer').children()}
			}
		}

		javascripts.site = TypoScript:Template {
			templatePath = 'resource://MapSeven.Neos.Metronic/Private/Templates/Page/Default.html'
			sectionName = 'bodyScripts'
		}

	}
	@cache {
		entryIdentifier {
			authenticationIdentifier = ${Authentication.identifier(Configuration.setting('Flowpack.Neos.FrontendUserManager.userObject'), 'identifier')}
			authenticated = ${Authentication.isAuthenticated(Configuration.setting('Flowpack.Neos.FrontendUserManager.providerName'))}
			titleTag = ${TitleTag.resolveFromRoute('--flowpack_snippets-search.post', 'Flowpack\Snippets\Domain\Model\Post', 'title')}
		}
	}
}

default < page

modal < page
modal {
	head >
	body.parts >
	bodyTag {
		attributes.class = 'page-full-width'
	}
	body {
		templatePath = 'resource://MapSeven.Neos.Metronic/Private/Templates/Page/PageModal.html'
	}
}

leftSidebar < default
leftSidebar {
	body {
		templatePath = 'resource://MapSeven.Neos.Metronic/Private/Templates/Page/PageLeftSidebar.html'
		content {
			sidebar = PrimaryContent {
				nodePath = 'sidebar'
			}
		}
	}
}

rightSidebar < leftSidebar
rightSidebar {
	body {
		templatePath = 'resource://MapSeven.Neos.Metronic/Private/Templates/Page/PageRightSidebar.html'
	}
}

root {
	@cache {
		entryIdentifier {
			authenticationIdentifier = ${Authentication.identifier(Configuration.setting('Flowpack.Neos.FrontendUserManager.userObject'), 'identifier')}
			authenticated = ${Authentication.isAuthenticated(Configuration.setting('Flowpack.Neos.FrontendUserManager.providerName'))}
			titleTag = ${TitleTag.resolveFromRoute('--flowpack_snippets-search.post', 'Flowpack\Snippets\Domain\Model\Post', 'title')}
		}
	}
}